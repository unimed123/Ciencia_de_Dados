###############################################################################
# CURSO:  Formação Cientista de Dados        PLATAFORMA: Data Science Academy #
# MÓDULO: Big Data Analytics com R           INSTRUTOR:  Daniel Mendes        #
# Data: 15/04/2018 - inicio aula: 19:48 pm  15/04/2018 - fim aula: 21:10      #
###############################################################################



# Regressao Linear

# ***** Esta e a versao 2.0 deste script, atualizado em 23/05/2017 *****
# ***** Esse script pode ser executado nas versoes 3.3.1, 3.3.2, 3.3.3 e 3.4.0 da linguagem R *****
# ***** Recomendamos a utilizacao da versao 3.4.0 da linguagem R *****

# Configurando o diretorio de trabalho
# Coloque entre aspas o diretorio de trabalho que voce esta usando no seu computador
setwd("C:/RFundamentos/Parte_7")
getwd()

## Exemplo 1 - Massa de dados aleatoria

# Criando a massa de dados (apesar de aleatoria, y possui  uma relacao com os dados de x)
x <- seq(0, 100)
y <- 2 * x + 35

# Imprimindo as variaveis
x
y

# Gerando uma distribuicao normal
y1<- y + rnorm(101,0,50)
y1
hist(y1)


# Plotando o relacionamento
plot(x, y1, pch = 19, xlab = "X", ylab = "Y")
#apresentam uma tendencia para um relacionamento linear, aumenta x e y

# Criando um modelo de regressao
modelo <- lm(y1 ~x) # criando um modelo lienar passando a variavel dependente y1 e a independente x. 
#a fromula lm retorna o valor de a e b que definem a reta que mostra a relacao entre estas variaveis


modelo
class(modelo)

# Capturando os coeficentes
a <- modelo$coefficients[1]
b <- modelo$coefficients[2]


# Formula de Regressao
y2 <- a + b*x
y2

# Visualizando a linha de regressao, valores previsto a linha
lines(x, y2, lwd = 2)

# Simulando outras possiveis linhas de regressao
y3 <- (y2[51]-50*(b-1))+(b-2)*x
y4 <- (y2[51]-50*(b+1))+(b+1)*x
y5 <- (y2[51]-50*(b+2))+(b+2)*x
lines(x,y3,lty=3)
lines(x,y4,lty=3)
lines(x,y5,lty=3)

## Exemplo 2 - Pesquisa sobre idade e tempo de reacao

# Criando os dados
Idade <- c(9,13,14,21,15,18,20,8,14,23,16,21,10,12,20,
           9,13,5,15,21)

Tempo <- c(17.87,13.75,12.72,6.98,11.01,10.48,10.19,19.11,
           12.72,0.45,10.67,1.59,14.91,14.14,9.40,16.23,
           12.74,20.64,12.34,6.44)

# Grafico de Disperssao (ScatterPlot)
plot(Idade, Tempo,
     xlab = 'Idade',
     ylab = 'Tempo de Reacao')
# neste conjunte de dados regressao e negativa


# Criando o Modelo
modelo <- lm(Idade ~ Tempo) #tio e uma formula
modelo # calculou o coeficiente a e b

# Calculando a reta (a+b^idade) (-++ = -)
reta <- 25.75 - 0.93*Idade

# Gerando grafico
lines(Idade,reta)
?lines

# Exemplo 3 - Relacao entre altura e peso

# Criando os dados
alturas = c(176, 154, 138, 196, 132, 176, 181, 169, 150, 175)
pesos = c(82, 49, 53, 112, 47, 69, 77, 71, 62, 78)

plot(pesos, alturas, pch = 16, cex = 1.3, col = "blue", 
     main = "Altura x Peso", 
     xlab = "Peso Corporal (kg)", 
     ylab = "Altura (cm)")

# Criando o modelo
lm(alturas ~ pesos)

# Gerando a linha de regressao, so tinhamos x e y agora temos o a e b para fazermos previsoes dentro do r
abline(98.0054, 0.9528)
# a linha definem os valores previstos, os pontos representa os valores observados.

# Criacao do modelo
modelo <-  lm(alturas ~ pesos)
#executar novamente a funcao lm porrem vai guardar o objeto que chamamos de modelo

# Visualizando o modelo
summary(modelo)

# Prevendo os possiveis resultados, funcao lm cria o modelo e o predict utiliza o modelo para prever os valores
previsao <- predict(modelo)
previsao # gera os valores previsto para y, na analise devera avaliar as variaveis dependentes e independentes

# Plot
plot(pesos, alturas, pch = 16, cex = 1.3, 
     col = "blue", 
     main = "Altura x Peso", 
     xlab = "Peso (kg)", 
     ylab = "Altura (cm)")

# Construindo a linha de regressao
abline(lm(alturas ~ pesos)) 

# Obtendo o tamanho de uma das amostras de dados
num <- length(alturas)
num

# Gerando um grafico com os valores residuais, vamos fazer um loop for todo de uma vez e plotar em um grafico, coletamos todo o residuo de uma unica vez
for(k in 1:num)
  lines(c(pesos[k], pesos[k]),
        c(alturas[k], previsao[k]))


# Gerando graficos com a distribuicao dos residuos, nesta formula demonstra o todos os residuos em um unico grupo de grafico
par(mfrow = c(2,2))
plot(modelo)




