Link para download de todos os datasets usados no curso:

http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets


ML - Ensinar algoritmos a usar inteligência para resolver problemas.


Porque o R e Microsoft Azure Machine Leraning?
.Azure Machine Leraning é visual, enquanto R é linha de comando;
.O R permite estender as funcionalidade do Azure ML;
.Combinação que permite escabilidade e mais manipulação de ddos e criação de modelos;
.O ML Studio traz 

Azure ML Workflow - Inião de interface gráfica com linha de comando que está dando certo!!!!


Evolução dos Sistemas Analíticos:


Business Intelligence - 
> primeiro avaliamos para observarmos o que estava acontecendo ou o que havia acontecido.
Este é um sistema de modelo descritivo que buscam buscar padrões, aonde entra o sistema de BI.
Expondo porque as coisas acontecem , buscar certo padrões ou fenômenos.

Business Analytics-
> após o sistema de BI temos o Business Analytics que utilizam modelos preditivos para tentar preveer eventos futuros 
Matéria prima = indicadores, pesquisas, dados de ferramentas de BI, conteúdo das Redes Sociais, Arquivos Log e Sensores, Relatórios e e-mails.
Vantagens:
Mapear as massas identificando padrões/perfil e análise da ocorrência em determinada região e aperfeiçoar o objetivo planejado. Realizando um atendimento mais eficiente 
e preciso alocando recursos necessários para o atendimento das demandas minimizando o custo, tornando acertiva a necessidade dos beneficiários.

5 Perguntas que precisam ser respondidas antes de pensar em Big Data Analytics.
.Big Data Analytics é ciência e não advinhação.

1 - Qual o objetivo?
2 - Qual a origem dos dados? >uma vez que os dados dará inteligencia de negócio ao seu Business você deve identificar os potenciais fontes de dados definindo seus alvos
você precisa descobrir quais são os indicadores que serão utilizados para acalça-los.
3 - Que solução escolher? > existem muitas soluções de análise de dados no mercado, uma escolha criteriosa passa por uma pesquisa profunda e comparação entre as melhores
disponiveis, veremos ao longo do curso algumas.
4 - Este será um trabalho em equipe? > consultorias externas/parceiros/clientes/fornecedores. Todos eles poderam contribuir com dados ou informações relevante para o resultado do seu projeto.
5 - Qual o impacto que o Big Data Analytics terá no negócio? > Big Data Analytics devem alcançar os dados internos e externos ao ambiente cooporativo.

Como o Big Data Analytics afeta a área de negócio?

SAÚDE:
>Combate a doenças e epidemias;
>Dispositivos móveis de monitoramento;
>Atendimento médico individualizado;
>Wearables e apps;

A Accenture Healthcare IT Vision 2015, uma pesquisa anual sobre tendências de tecnologia, traz dados interessantes sobre o uso de Big Data na Saúde

A Accenture Healthcare IT Visão 2015 revela cinco principais tendências: A Internet of Me, Resultado evolução da economia, Plataforma (R), Intelligent Enterprise e força de trabalho reinventado. Estas tendências provam claramente que o digital está a influenciar drasticamente a indústria hoje,
e continuará a fazê-lo para as próximas décadas.https://www.accenture.com/us-en/insight-healthcare-technology-vision-2015


Big Data Analytics = Estatística + Matemática + Mídias Sociais + Macroeconomia + Tecnologia + Dados

MAKETING:
> Análise de Mercado mais específico  - 
Análise descritiva - extrair significado de eventos ocorridos;
Análise preditiva - estabelecer correlações; 
Análise prescritiva - levantar idéias.

> Interpretação de Dados mais eficaz - 
Mineração de dados, interpretação estatística.

> Mais fontes de dados - 
Dados demográficos, não são mais suficientes para demonstrar o perfil do consumidor.
Páginas do Face, check in que faz no foursquare, dizem muito de suas preferencias e ajudam a identificar clientes em potencial.
Há varegistas que consideram dados meterológicos para comprarem mercadorias para seus pontos de vendas.

> Automação do Marketing - 
Páginas no Face disponibilizam tendencias, consideram o ID dos usuários, dispositivos moveis rastreiam os movimentos da pessoas.77
Podendo mapaear as tendencias e campanhas com análises preditivas, o profissional consegue medir o comportamento do internauta da comcorrência e do mercado.

>Experiências mais significativas no ponto de Venda - 

INDUSTRIA:

>Eficiência no planejamento;
>Gestão de Suprimentos;
>Redução de Custos


.sqldf - pacote que permite realizar queries SQL em dataframes no R;
.forecast - modelar séries temporais;
.plyr - dividir uma estrutura de dados em grupos e aplicar funções a cada grupo;
.stringr - manipulação de strings;
.database drivers - RMongo, RODBC, RMySQL;
.ggplot2 - visualização de dados;
.qcc - controle de qualidade estatístico;
.randomForest - pacote para Machine Learning;

R e Microsoft Azure Machine Leraning

Azure Machine Leraning
. Serviço online, que pode ser usado para criar, operar e pesquisar usando análise preditiva na nuvem
utilizando um web browse, você se inscrever e fazer experimento de análise prediva.
.Há várias bibliotecas e o modo de trabalho é arrastar e soltar.
Machine Leraning Studio
. É possível construir um fluxo de trabalho para experimento de DataScience, muito parecido com o Knime.

Diversos Módulos de ML:
Explo: Azure ML Toolkit (algoritmos de Classificação, Regressão e Clusters)

Azure HDInsight

2014 - Primeira versão do Azure Machine Learning;
2014 - Microsoft lança a plataforma Cortana Intelligence, totalmente baseada em ML;

Competidores:
.Amazom ML (Amazon);
.IBM Watson Analytics (IBM).

ML traz novos paradigma:
Dados Output - Computador - Programa -- ML
Vantagem:
Previsões em novos conjuntos de dados

O que é o LaTeX?
> É um programa de marcação para editoração de documento de alta qualidade tipográfica específica para a elaboração de texto
científico e matemático. O objetivo do LaTeX é que o autor pode se distanciar da apresentação visual, focando apenas na elaboração
do trabalho científico.
Ele possui fórmula para tratarmos de bibliografia, referencia e tudo mais que não esteja relacionada com o conteúdo do documento em si.
A idéia central do LaTeX é distanciar o autor o máximo possível da apresentação visual da informação, pois a constantes preocupação com 
a formatação desvia o pensamento do conteúdo escrito.
Trata-se de uma linguagem que possuem funções e comandos e basicamente são transformados e copilados em uma arquivo .pdf.

No LaTex você lida com dois ambientes o código fonte e o produto final. ou seja, contéudo e fórmula são coisa separadas em LaTeX.
A fórmula de produção de relatórios mais utilizados para os usuários e (R) é por meio de script combinando código LaTeX com código (R).
>Os arquivos receberão a extensão .Rnw
Usamos o (R) para converter os .Rnw com apenas código LaTeX. O documento então poderá ser convertido em .pdf encerrando o relatório.
Utilizando o LaTeX podemos automatizamos o processo de referencias cruzadas e referencias bibliograficas.

Existe duas fórmulas para produção de relatórios neste formato para .pdf:

Sweave () " pacote (R) "  Permite a produção ágil do documento ligando o LaTeX e o (R) - Comando, saídas computacionais e/ou gráficos, saindo automaticamente do texto.
> elaboração de relatórios, listas de exercícios, textos técnicos, relatórios de análise, artigos cientificos e até livros.
http://www.leg.ufpr.br/~paulojus/embrapa/Rembrapa/Rembrapase35.html

knit()    " pacote nigth r "
http://www.pet.est.ufpr.br/?p=3060

Pacotes necessários para pesquisas reproduziveis, ou, Reproducicle Research.


[Usando o R Markdown e Criando seu Portfólio]

Porque usa MARKDOWN
> É fácil de aprender, de forma simples é rápida
> Linguagem de marcação de texto, que permite criar documentos a partir de texto plano
 É PARECIDO COM O LaTeX.

É um novo pacote que pode ser instalado. kntir+markdown+pandoc = rmarkdown

install.packtages('rmarkdown)

Podem ser convertidos em html/pdf ou word e em outros formatos. É possível criar tabelas e gráficos interativos.

Documentos em (R) Markdown são totalmente reproduzíveis


knit2html()

Converte. Rmd em . Html

[Usando o Github]

Objetivo promover o controle de versão de arquivos, criar um portifólio de projetos

O que é um sistema de controle de versão?
É um software que irá cuidar das gestão das várias versões de seus arquivos.
Se um problema acontecer poderá retroagir para uma versão anterior de seu projeto.
Organizar e versionar esses arquivos é uma boa prática para os cientistas de dados.

Existem varios sistemas de versão:
. CVS - Concurrent Versions System;
. SVN - Subversion;
. VSS - Visual SourceSafe;
. Rational ClearCase;
. Git.

[git]

Foi desenvolvido pelo mesmo desenvolvedor do Linux, é o preferido dos desenvolvedores
Vantagens:
. Não depender de um servidor central;
. Dar ênfase à velocidade;
. Integridade dos dados;
. Potencializar o trabalho paralelo.

Atualmente todas as ferramentas de desenvolvimentos atuais dão suporte ao git
seja nativamente ou por meio de plugins.

Porém o mais importante é adquirir o hábito de sistema de versão.
Mesmo porque os conceitos básicos se aplica a todos eles mudando apenas os comandos.

Principais conceitos do Git
[Branch]
Ramificação do projeto, cada branch representa uma versão do seu projeto e podemos
seguir uma linha de desenvolvimento a partir de cada branch

[Clone]
Cópia local de todos os arquivos de um repositorio git

[Commit]
Coleção de alteraçõe realizadas, é uma espécie de chekpoint, sempre que necessário você
pode retroceder até algum commit existente.

[Fork]
Uma bifurcação do projeto, uma cópia do projeto existente para seguir uma nova direção.

[Master]
Branch padrão de um repositório Git.

[Merge]
É a capacidade de incorporar alterações do git, quando acontece uma junção de diferentes branches.

[Push]
Empurra as susas alterações para o repositório remoto. É quando está trabalhando na sua máquina e 
quer atualizar o repositório na internet.

[Repositório]
Local onde ficam todos os arquivos do projeto, inclusive o histórico e versões.

Já o GitHub - https://github.com é um sistema de hospedagem de sistema git gratuito.
"Milhões de desenvolvedores usam GitHub para construir projetos pessoais, apoiar as suas 
empresas, e trabalhar em conjunto em tecnologias open source."
É uma rede social para desenvolvedores.
Meu cadastro fcarvalho12


CAPITULO II

[R]

O (R) é case-sensitive, isto é, ele diferencia letra maiúsculas de minúsculas.
>Portanto A é diferente de a.
>Separador de casas decimais é ponto "."
>A vírgula é usada para separar argumentos (informações).
>Evite usar acentos, não só no (R), mas em qualquer arquivos que irá salvar no computador.
Acentos quando usados em programação pode causar erros, evite sempre que possível.
>Workspace, cada vez que abre a área de trabalho no RStudio ele abre uma Workspace, aonde fará suas anotações.

[Área de trabalho]

getwd(), aonde seus arquivos serão salvos.
setwd(), para que você mudar seu ambiente de trabalho.
 
[Lista de Pacotes R]
https://cloud.r-project.org - clique na opção Packages no menu

[Instalar e ativar funções do pacote]

intall.packages("descr") - instalar o pacote
library(descr) - para ativar a função

[Existem 4 fórmulas básicas para descubrir o que uma função faz]

help.search()
??nomedafunção
RSiteSearch()
example


[Demonstrações]
Algumas funções em (R), possuem demonstrações de uso, usamos a função:

demo()

[Sessão]
Sempre que quiser coletar informações sobre a sua função utilize:

sessionInfo()

[Imprimir na Tela]
Para imprimir uma função na tela utilize a função:

print()

[Repetição de comando]
Para repitir um comando existente dentro de um script utilize:
Serve para chamar o comando dentro de outro arquivo

source()

[TIPOS DE DADOS NO (R)]

#Numérico - Inteiros ou reais (1,5.9,-1,4), número do tipo flot como idade, renda, custo, etc.

#Caractere - Representa uma String, sendo um texto, uma palavra, ou mesmo um único caracter ("A", "bolha")

#Complexo - Número complexos são representados pelo valor imaginário "i" que representa uma unidade imaginária
o (R) precisa saber que estamos trabalhando com a variável imaginária, caso contrario apresentará NA - Not a Number, não é número que 
indica uma indefinição matemática.
mesmo que a parte imaginária seja nula "i" é necessário evidencia-la para que o (R) retorne o valor, pode ser escrito
z=x+yi > x e y números reais e "i" uma unidade de imaginário.

#Lógico - variaveis que podem ser verdadeiro"TRUE" ou falso"FALSE"

[VALORES FALTANTES E ESPECIAIS] - veremos como apresenta dentro de dataset e como trata-los, esse é um dos principais problemas de um CD

NA - Not Available
NaN - Not a Number
Inf e -Inf > mais ou menos infinito


as.integer(TRUE), sempre será "1" e FALSE "0", dentro do computador é tudo 1 (passa coreente) ou 0 (não passa corrente)

[VARIAVEIS]

Na programacao variavel e uma area no computador aonde se armazena valores

[OBJETOS DO (R)]

# Vetores > sequencia de valores numericos ou caracteres.
# Matrizes > Coleção de vetores em linhas e colunas. Sendo que todos os vetores devem ser do mesmo tipo de dados.
# Lista > São conjuntos de vetores, dataframes ou matrizes, que não precisam ter o mesmo comprimento. A maioria das funcoes em (R) retorna ao 
fato uma lista de elementos logicos.
# Dataframes > O mesmo que matrizes, porém aceita os vetores com tipos de dados diferentes
geralmente nos guardamos nosso dados em objetos no estilo dataframe, pois ele permite que armezenem dados de estilos diferentes.
# Funcoes > as funcoes servem para realizarmos calculos e operacoes com outros objetos em (R), mais a funcao por si propria é um objeto em (R).

*Precisamos saber que existe uma logica de programacao dentro do (R) para cada um desses objetos.
 precisamos saber que operacoes podemos realizar com esses objetos. O que fazemos no (R) e um codigo que esta capsulado para realizarmos cada objeto 
 Nao preciso saber o que e feito embaixo dos panos, preciso saber o que fazer!!

[VETORES]

Vetores são conjuntos de elementos da mesma natureza, tendo significado diferente da matematica, para o (R) é qualquer conjunto de dados unidimensional 
de valores, esses valores podem ser numeros, strings ou valores logicos (TRUE, FALSE).
Para o (R) o vetor tem significado mais amplo que na matematica.

#Criando vetores
c()
seq()
rep()
Entre os parenteses colocamos parametros, valores que serão usados para a criacao dos vetores

[MATRIZES]

Matrizes são conjuntos de elementos de uma mesma natureza, organizados em linhas e colunas.
Determinado a fórmula matrix(), essa funcao tem como argumento o numero de dados, o numero de linhas e o numero de colunas da matriz.
Note: O conjunto de dados tem que ser escrito na ordem das colunas, ou seja, como se as colunas estivessem enfileiradas umas sobre as outras.

# ARRAY - o array(), generaliza o conteudo da matriz, enquanto na matriz os elementos são em 2 dimensoes (linhas, colunas) em 
array os elementos podem se organizar em numero arbitrario de dimensoes.
O array representa uma hipermatriz, sendo um conjunto de numeros arranjados em mais de 2 dimensoes.

#Criando Matrizes      
matrix()
rbind()
cbind()

# Criando Arrays
array()

[LISTA]

Lista sao uma generalizacao de vetores e representam uma colecao de objeto
Lista é uma colecao de objetos de tamanhos e natureza diferente, ela e regida pela funcao list() esta e a estrutura mais generalista da linguagem (R).
Podemos por exemplo termos uma lista formada por matrizes e vetores
Listas sao objetos extremamente flexiveis e poderosos, entretanto são os que mais causam confusoes entre aqueles que estao aprendendo (R).

#Criando Matrizes      
list()

Exemplo: # Lista de Strings
lista_caracter = list('A', 'Bem-vindo', 'DSA')
lista_caracter

[[1]] > elemento 1
[1] "A" #1º elemento do 1º elemento da lista

[[2]] > elemento 2
[1] "Bem-vindo" #1º elemento do 2º elemento da lista

[[3]] > elemento 3
[1] "DSA" #1º elemento do 3º elemento da lista

Observer que cada sao idependentes, pode ser um vetor, uma matriz, etc.


[ESTRUTURAS DE CONTROLE]

Elas estao presentes em todos as linguagens de programacao, elas permitem que voce faca validacoes, repita um bloco de codigo com numero determinado de vezes e
realize mudancas no comportamento de seu script de acordo com determinadas regras.

> Principal estrutura de controle

# Condicionais If-Else - SE/ENTAO

if (condicao) {conjunto de tarefas} else {outro conjunto de tarefas}
ifelse(condicao, tarefa1, tarefa2)

# Comando for() - loop for

E usado para fazer loop (repetir uma atividade determinado numero de x.

for(i IN 1:N) {conjunto de tarefas}

for( i 'contador' IN 'em' 1:N 'ranger de valores' {conjunto de dados 'que sera executada'}

O loop for() tem uma sintase mais complexa porque o codigo entre parenteses nao apenas testa a condicao
ele cria o objeto a ser testado.

Exemplo:
for(i 1:10){print('isso e um loop')}

O objeto i e criado e e seu valor e incrementado de acordo com os valores do vetor
de 1 a 10, ou seja, o loop e executado 10 vezes, e nesse caso imprime na tela a mensagem 'isso e um loop'.


# Comando while() - loop while

while (condicao satisfeita){conjunto de tarefas}

O loop while() tem sintase semelhante aa condicao if(), ou seja, escrevemos entre os parenteses a condicao a ser testada.
e o codigo sera executado enquanto o teste resultar verdadeiro.

# Repeticoes
rep(x,y)
rep(repita x, y vezes)
repeat{}

as funcoes rep() e repeat() executa determinado bloco de atividade um numero de vezes.

# Verificando e Convertendo

is.vector - essa funcao (is.) verificam se determinado dado, neste caso e um vetor
as.vector - essa funcao (as.) elas convertendo o objeto, neste exemplo com vetor.

# Matrizes e dataframes no R são semelhantes, mas guardam uma grande diferenca
as matrizes como ja visto, comportam elementos do mesmo tipo de dado
os dataframes comportam elementos de diferentes tipos de dados.

# Valores NA - Not Avalible
Isso vai ser muito comum no seu conjunto de dados nunca vira 100% preenchido

# Funcao Sample
Ela cria uma amostra de dados.
para sabermos se existe NA  no conjunto de dados podemos utilizar is.na()

# cbind e rbind
Serve para unir elementos, exemplo, vou unir o vetor a uma matriz

# Retirar NA caso exista
na.omit()

# Classificar ordenando os dados
Explo: a <- c(1,3,2)
       a
       a[order(a)]
Pode ordenar por um conjunto especifico - order(mtcars$mpg)

#  Slicing - fatiando a estracao do dados
Para fatiar dentro de uma lista tem que usar dois colchetes [[]]
exemplo - list1[[1]]

# head() serve para obtermos os primeiros elementos de um dataframe
# tail() ultimos elementos
# str() resumo
Exemplo: quero que dentro da base de dados traga um valor maior que 100
subset(mtcars, subset = hp > 100000)

[FATORES]
O termo fator refere ao tipo de dados estatistcos para armazenar variaveis categoricas 
Muito uteis para plots e regressoes
Fatores representam uma maneira muit eficiente para armazenar valores de caracteres, 
porque cada caracter unico e armazenado apenas uma vez e os dados sao armazenado como 
um vetor de inteiros.
Funcao:
factor()
Para criarmos fatores ordenados temos duas funcaos:
factor(..., ord=T)
ordered()

# Variaveis categoricas - pertence a um nº limitado de categorias.
# Variaveis Continuas - podem pertencer a um nº infinito de valores.

E importante que o R saiba quando esta lidando com variaveis categoricas ou continuas
pois os modelos estatisticos vao tratar as variaveis de forma diferente.

Exemplo:
Categóricas - Qualitativas 
>Nominais - Profissao, sexo, relegiao.
>Ordinais - Escolaridade, classe social, fila.

Continuas - Quantitativas
>Discretas - Nº de filhos, Nº de carros, Nº de acessos
>Continuas - Altura, Peso, Salario

Entretando, as distincoes sao mennos rigidas do que esta discricao.
Uma variavel originalmente quantitativa pode ser coletada de forma qualitativa.
Exemplo1: a variavel idade, medida em anos completos, e quantitativa (continua),
mas, se for informada apenas a faixa etaria (0 a 5 anos, 6 a 10 anos, etc...), e
qualitativa (ordinal)
Exemplo2: Peso de lutadores de boxe, uma variavel quantitativa (continua) se trabalharmos
com o valor obtido na balanca, mas qualitativa (ordinal) se classificarmos na categorias
do boxe (peso-pena, peso-leve, peso-pesado, etc...)
Nem sempre uma variavel representada por nº e quantitativa.

[FUNCOES]
Sao grandes trunfos na linguagem de programacao, funcao no R tem a mesma utilidade nas demais liguagens de programacao, ou seja,
evitar repetir codigos.
O uso de funcoes deixa o codigo legivel e elegante e menos repetitivo, alem disso as funcoes abstrai para caso mais gerais por meio
de parametros, fazendo util alem daquelas configuracoes especificas que motivou sua implementacao.

Funcao tambem sao objetos en R, alias tudo que voce utiliza usando atribuidos vira um objeto no R.
> Funcoes 
Tudo que voce atribui com    '<-'  vira um objeto no R

Assim e natural pensar que funcao pode receber outras funcoes como argumentos, isso inclusive e bem comum.
Funcoes aceitam quaisquer e quantos parametros precisarem  retornar ao objeto de qualquer, seja inclusive nada (NULL)

 > nome_da_funcao(parametros)

No lugar dos parametros podera colocar nomes que servirao como objetos (nº, texts, vetores, listas, etc...) qualquer coisa que voce possa
precisar como parametro para uma funcao.

 > Built-in - o R tem diversas funcoes internas chamada   

Existem ainda a funcao disponibinzada que é simbolizada por 3 pontos:

> nome_da_funcao(...)

Ela é usada quando nao sabe qtos parametros serao pensados, dessa forma qualquer numero de parametros podem ser usadas, cada vez que voce
executar a funcao, sendo bastante util.

[FUNCOES ANONIMAS]

>test_func <- sapply(c(1:10), function(x) {x %% 2==0})
>test_func
[1] FALSE TRUE FALSE TRUE FALSE TRUE FALSE TRUE

As funcoes anonimas sao frequentementes utilizadas e tem essa denominacao, pois nao nos damos ao trabalho de defini-las como objeto permanente.
O ponto deste exemplo esta na parte function (x)

[FUNCAO ESCOPO]

Escopo se refere ao local onde o objeto foi criado, o escopo pode ser global ou local.
Objetos criados dentro de uma funcao tem escopo local, ou seja, somente existe dentro daquela funcao
 
[CRIACAO DE FUNCOES]

function(argumentos) {corpo da funcao}
nome_da_funcao <- function(argumentos) {corpo da funcao}

Esta e uma das vantagens do R, alem de ser um programa para analise estatistica, 
O R e acima de tudo uma linguagem de programacao, com a qual podemos programar nossas proprias funcoes.

[FUNCOES INTERNAS - BUILT-in]
abs()
sqrt()
prod()
rev()
c()
contributors()

[FUNCAO SAMPLE]
Essa funcao gera amostras

[FAMILIA FUNCOES - apply()]

# samplly() - recebe dos parametros, 1 objeto e depois a funcao (explo:sum)
Vetores no R sao cadeias ordenadas de elementos geralmente numeros ou letras e sao objetos de maiores interesses, pois, sao eles que guardam os numeros/ou palavras
Sao eles os objetos de maior interesse, pois, sao eles que guardam os dados a serem analisados.

##PROBLEMAS -> loops no R sao sofrivelmente ineficientes, as funcoes da familia apply() servem para evitar a utilizacao dos loops.

apply(), tapply(), lapply(), saplly()...

Como loops no R sao problematicos podemos utilizar os apply() que roda dezenas de vezes mais rapido.

apply() - aplica uma funcao a todas as linhas/colunas de uma 'matriz ou dataframe'
apply(x, MARGIN, FUN, ...)    - x = matriz ou dataframe (objeto)   / MARGIN = linha ou coluna (dever ser o nº 1 ou 2, indicando se e linha ou coluna, 
                                                                     sendo 1 linha e 2 coluna) / FUN = funcao a ser aplicada (explo: sum)

lapply() ou sapply() - aplica a uma 'funcao ou lista' a diferenca entre elas e que a 1ª retorna uma nova lista e a 2ª sempre que possivel um vetor ou matriz.

lapply() - recebe um vetor ou lista e aplica uma funcao a cada elemento.
lapply( x, FUN, ...)

sapply() - nada mais e do que uma versao mais amigavel da lapply()
sapply( x, FUN, ..., simplify = TRUE, use.names = TRUE)

tapply() - os vetores podem ser divididos em diferentes subsets e as funcoes aplicadas a estes subsets
tapply( x, INDEX, FUN = NULL, ..., simplify = TRUE)

maplly() - versao multivariada da sapply()

vaplly() - similar a sapply() mas possui um tipo especifico que deve ser retornado. O sapply() retorna sempre em vetor. A vapply() podemos determinar qual o tipo
de retorno apos executarmos a funcao.

by() - versao orientada a obejtos da tapply() aplicada em dataframes.


#QUANDO USO 'O QUE' DA FAMILIA apply()?'

-> se voce estiver trabalhando com objetos:
-> list, numeric, character (list/vector) >> saplly() ou lapply()
-> matrix, dataframe (agregacao por coluna) >> by() ou tapply()
-> operacoes por linha ou operacoes especificas >> apply()


[FUNCAO unlist()]

'Transpor', uma lista para vetores, usada para descontruir uma lista. 
-> Vetor é um conjunto de elementos do mesmo tipo de dado, na unlit() podemos fazer uma lista dentro de outra, conforme o exemplo:
# round(mean(unlist(list2))) #

[FUNCAO do.call()]

A funcao do.call() aplica-se em uma fucao ao objeto inteiro e nao a cada elemento individualmente.
--> A funcaoes da familia apply() aplicam uma funcao a cada elemento de um objeto (substitui o loop)

As funcao lapply() voce utiliza 1º o objeto depois a funcao. explo: apply(x,sum)
Ja na funcao do.call() e ao contrario, primeiro utiliza-se a funcao depois o objeto. explo do.call(sum,x)

A funcao do.call(), soma-se todos os elementos, diferente do lapply() que soma apenas elemento a elemento de uma lista de objetos.


[PACOTES]

Pacotes R são uma maneira ideal para empacotar e distribuir o codigo R para que outros possam utiliza-los.
O RStudio possui uma variedade de ferramentas que tornam o desenvolvimento do pacote R mais facil e produtivo, incluindo utilizacoes padroes.
> Sao 3 (tres) grande grupos de pacotes R:

# RBase <- coracao do R e contem as funcoes principais disponiveis quando inciamos o programa, os # pacotes recomendados # que sao instalados
junto com o RBase, mas nao sao carregados quando iniciamos o programa, por exemplo:
MASS e LaTex <- sao pacotes recomendados, para usarmos a funcao desses pacotes devemos carrega-los usando o comando library().

# Cran <- sao pacotes contriluidos, nao sao instalados juntos com o RBase esses pacotes estao disponibilizados na pagina do R
(http://cran.r-project.org), que deverao ser copiados, instalados e carregados. Acesse a pagina do cran, packages, constam mais de 8 mil pacotes.

# GitHub <- plataforma que constam pacotes disponibilizados por usuarios do R.

Os pacotes podem ser enviados ao cran, compartilhados pelo GitHub ou apenas usados como ferramentas de analise criado por voce.

Conceitos de Pacotes <- "tudo o que pode ser automatizado, deve ser automatizado"
Trabalhar menos com os detalhes (estrutura, etc) e mais com funcionalidades (funcoes uteis, etc).

# search() <- lista todos os pacotes que estao carregados.

# require() <-  faz a mesma coisa que o library(), porem podemos usar dentro de uma funcao para fazermos um pacote especifico.

# detach() <- serve para remover um pacote na area de trabalho, explo: detach( package:NOME DO PACOTE).

# attach() <- o Objetivo e anexar o dataset e com isso acessar os elementos, sem a necessidade de usar um nome especifico daquele dataset com o qual esta trabalhando.

# ls() <- serve para verificar a lista de funcao dentro de um pacote, explo: ls(pas = "package: NOME DO PACOTE").

# ls(getNamesspace('NOME DO PACOTE'), all.names = TRUE) <- serve para procurar uma funcao de um pacote.

# ls.str('package:NOME DO PACOTE) <- disponibiliza os parametros especificos a serem utilizados.


Criando Pacotes <- Para Criar Pacotes pode ser necessario ferramentas adicionais de desenvolvimento, no caso do Windows, instalar o Rtools.
Podemos criar no RStudio nossos pacotes: NewProjects/RPackage (create New Package).


<- Criacao de um pacote:
clicar em:
file/new project/R package:
type:package
package name: defina um nome para o seu pacote

Pode adicionar/criar script R em:

Create package based on Source files:

Create project as subdirectory of:

tambem pode colocar direto dentro do GitHub

Creat project
Clicar no menu superior Build/Opcao:
configure Build Tools
ou
Build Check package
Build reload.

[EXPRESOES REGULARES]

Recurso usado para verificar se existe um padrao em uma string ou vetor de caracteres.
Sao uma das mais importantes caracteristicas da linguagem R. Expresoes regulares sao nada mais que um conjunto de caracteres que formam padroes permitindo
fazer buscas em strings.
Voce pode utiliza-la para checar se um determinado padrao existe em um texto, substituir parte de um texto (qdo citamos texto estmaos falando de strings)
ou mesmo para extrairmos padroes de um conjunto de dados. Sendo muito util, principalmente quando estiver limpando os dados ou trabalhando com text mining.

Alguns importantes comandos:

# grep() <- retorna TRUE quando um padrao e encontrado.
# grepl() <- retorna um vetor de indices dos caracteres que contem o padrao especificado.

# vetor e muito importante para um cientista de dados, em muitas operacoes que executa em R o retorno e um vetor de elementos #

# sub() <- substitui o primeiro caracter encontrado de acordo com o padrao especificado.
# gsub() <- substitui todos os caracteres encontrados de acordo com os padroes especificados.

>> grep, grepl, sub, gsub, regexpr, gregexpr >> todos recebem como parametro o ## pattern##

# pattern >> e o padrao, objetivo dessas funcoes e receber um padrao como parametro e buscar um padrao dentro de uma string, exatamente o conceito de mineracao
de dados. 
Mineracao de dados existe a decadas, porem o novo e o BigData, hoje o desafio e ser capaz de minerar esses dados, de buscar esses padroes em volume de dados cada
vez maior, diversificados e gerados em uma maior velocidade.
Ser capaz de extrair padroes, informacoes em um volume de dados e um desafio cada vez maior.

[DATA HORA]

O R fornece varias opcoes para trabalho com dados tipo data/hora, e acredite esses tipos de dados serao uns dos mais frequentes na analise de dados.
As datas em seu conjunto de dados estarao nos mais variados formatos, pois, cada sistema implementa uma forma diferente de armazenar dados, elas podem estarem gravadas
como strings, DD/MM/AA, DD/MM/AAAA H:M:S, etc.
Trabalhar com datas e sempre um desafio, principalmente quando analisa series temporais.
As datas sao representadas pela #class = date# e armazenadas como numero de dias desde 1/1/1970, apenas uma convencao que e adotada por muitos tipos de programacao, voce
podera manipular datas anteriores a 1970, porem, internamente o R grava como valores negativos.
Quando avaliarmos datas com H:M:S
TIME - representado por POSIXct, armazenados internamente como numero e segundos, desde 1970.

> # Formatando Datas
# %d: dia do mes em 2 dígitos (13)
# %m: mês em 2 digitos (01)
# %y: ano em 2 digitos (82)
# %Y: ano em 4 dígitos (1982)
# %A: dia da semana (Friday)
# %a: dia da semana abreviado (Fri)
# %B: mês (July)
# %b: mês abreviado (Jul)

# Formatando Time
# %H: hora (00-23)
# %M: minuto
# %S: segundo
# %T: formado reduzido para %H:%M:%S

> Pacote lubridate -> facilita a manipulacao de datas/horas em R, sendo bastante util. Utilizando o LUBRIDATE podemos extrair/incluir/zerar, etc.

?strtime: funcao que permite fazer conversoes de datas, contem todos os % do formato data/hora.

[GRAFICOS]

Graficos em R - Base Plotting System
A quantidade de dados que atravessa a internet a cada segundo e maior que todos os dados armazenados pelas empresas em 20 anos. E como uma empresa
armazenasse 1hexbite de daos por dia, todos os dias, se voce tentasse visualizar esses dados de sua empresa esse exercicio duraria apenas alguns
segundos, e logo voce estaria perdido em meio a tantos dados.
O cerebro humano e incapaz de processar uma quantidade de informacoes simultaneamente, mas o propio ser humano criou algo para resolver com eficiência
a visualizacao dos dados.
Visualizacao de dados:
E a representacao de dados em forma de graficos, seu objetivo e simplificar a analise de dados e promover uma compreensao mais clara facilitando o conceito
de ideia. Podemos informar bilhoes de dados e informacoes em 1 folha, sem a aplicacao de tecnica de visualizacao de dados e praticamente impossivel.
A visualizacao de dados e um tema que se tornara mais necessario no futuro muito proximo. Graficos, tabelas e estatisticas tornam a compreencao dos dados 
muito mais facil.
Visualicao de dados (Data Visualization) (DataViz)
O que sao graficos? -> grafico e uma representacao com forma geometrica construida de maneira exata e precisa a partir de informacoes numericas obtidas atraves
de pequisas e organizadas em uma tabela.
E como o R trata as visualizacoes? -> Existe um consenso na comunidade data science, que o R fornece uma das melhores ferramentas para a geracao de graficos.
Os graficos podem ser modificados, publicados em apenas algumas linhas de codigo.

-> Pacote Basico de Plotagem (Base Plotting System) e composto de dois pacotes:
# graphics - contem funcoes graficas basicas, incluindo plot, hist e boxplot.
# gr Devices - contem as implementacoes de dispositivos graficos com X11, pdf, postScript, png, etc. Os plots sao objetos construidos atraves de funcoes e com 
atributos.

-> Graficos em R (Basic Plotting System) - colunas, barras, linha, dispersao, area, bolhas, superficie, cone e pizza. Um conjunto de elementos que formam a 
capacidade basica do R de construir graficos.

O cientista de dados, deve e pode visualizar os graficos ao longo de todo o processo e nao apenas no final ao concluir a avaliacao da base de dados.

-> Gramatica do graficos - e utilizada para descrever as caracteristicas que fundamentam todos os graficos, principalmente os graficos estatísticos. A gramatica
dos graficos pode nos reponder, por exemplo: o que e um grafico estatistico? Em resumo nos diz que e um mapeamento de dados para a estetica (cor, forma, tamanho...)
de objetos geometricos como (pontos, linhas, barras...) existem 7 elementos que compoem a gramatica dos graficos:

Elementos
Dados -------------> O conjunto de dados a ser analisado;
Estetica ----------> A escala em que nos mapeamos os dados;
Geometria ---------> Os elementos visuais usados para representar os dados;
Facets ------------> Visualizar o grafico em porcoes menores;
Estatistica -------> Representacao e analise dos dados;
Coordenadas -------> A área na qual o grafico sera construido;
Temas -------------> Visual geral do grafico.

# Usando R para Importacao

Introducao

Parte 1                    
-Vetores                   
-Listas
-Dataframe
-Strings

Parte 2
-Objetos { Funcao, data, hora}
-Padrao { Funcoes regulares, DataMining}
-Visualizacao {Plot R, Ggplot, Lates, Criacao Maps}

Parte 3
-Tazer dados para o R importar e tratar

De onde importamos os dados para o R?
Nao existe nenhuma ferramenta 100% para utilizarmos, vamos utilizar o que de melhor cada ferramenta oferecer.

No curso teremos dados das seguintes fontes:

-> arquivos textos - flat files (txt, csv)
-> arquivos excel - (xls, xlsx)
-> banco de dados - (Oracle, Sql server, MySQL, PostgreSQL, SQLlite)
-> software estatisticos - (SAS, SPSS, Sdata)
-> dados internet - (web crawling)

#LIMPEZA E ORGANIZACAO#

O que estudar:

-> pacotes para importacao e tratamento de arquivos txt, csv;
-> pacotes para importacao e manipulacao de arquivos Excel;
-> importar e tratar dados do SQLite;
-> importar e tratar dados do MySQL;
-> importar e tratar dados do MongoDB;
-> limguagem SQL;
-> limpeza e organizacao de dados com dlplyr e tidyr.

#IMPORTACAO E MANIPULACAO DE DADOS#

Em geral o sistema estatistico R, nao sao adequados a manipulacao de dados em grande escala, alguns outros sistemas sao melhores
do que o R nisso. O sistema de gerenciamento de banco de dados por exemplo sao mais adequados para armazenar e permitir extracao
de dados tal como a relacao de banco de dados relacionais, bancos noSQL, e solucoes de bigdata como o Hadoop. Ou seja, o R nao tem
como objetivo o armazenamento de dados, o R e uma ferramenta de analise e para isso voce precisa trazer os dados para o R, processar
sua analise e depois seguir com os dados para armazenamento, seja em um banco de dados ou em arquivo texto.
A maior parte do seu tempo sera usado na preparacao dos dados, e muito raro que um conjunto de dados brutos esteja no formato correto,
mesmo quando importamos isso de um sistema confiavel, como o sistema ERP, por exemplo, e o formato que pode ser correto para o sistema,
pode nao ser o ideal para a analise de dados.

Veremos as manipulacoes dos arquivos csv, txt e Excel.

#Arquivos textos ou FlatFiles (TXT, CSV)
Sao uma das formas mais antigas de integracao de sistemas.

#Manipulacao de arquivos
O R apresenta 3 pacotes principais para carga de dados apartir de arquivos textos:
-> utils();
-> readr();
-> data.table().

Normalmente causa alguma confusao a quantidade de funcoes disponiveis para importar arquivos textos no R, esta tabela ajuda a explicar
um pouco essa diferença:

Pacote utils() -> read.table(); read.csv(); read.delim()
Pacote readr() -> read_table(); read_csv(); read_delim()

Usaremos 2 (dois) pacotes, o utils() ja vem com o R e o readr() que foi desenvolvido por um desenvolvedor do RStudio a mais 1 (um) ano today(071116).
Como visto as funcaoes dos pacote utils() e o readr() sao muito parecidos.
Tambem temos o
Pacote data.table() -> fread()
fread() utilizaremos no capitulo de bigdata na pratica, visto que importa mais rapido grandes bases de dados.

#Pacote utils():
O pacote utils(), que e automaticamente carregado na sua sessao R, pode importar arquivos simples em diferentes formas, atraves das funcoes:

read.csv - para valores separados por (,) e (.) como separador decimal;
read.csv2 - para valores separados por (;) e (,) como separador decimal;
read.delim - para valores separados por (tab) e (.) como separador decimal;
read.delim2 - para valores separados por (tab) e (,) como separador decimal;
read.fwf - para valores com nº exato de bytes por coluna.

Basicamente a diferenca das funcoes esta no tipo de caracter usado para separar os campos e o tipo de caracter usado no nº decimais.

read.table - muito util quando se esta fazendo a leitura de arquivos ASCII, que contem dados em formato retangular.
O arquivo de simples texto ou arquivo do ingles ASCII ((do inglês American Standard Code for Information Interchange; "Código Padrão 
Americano para o Intercâmbio de Informação") é um código binário (cadeias de bits: 0s e 1s) que codifica um conjunto de 128 sinais: 
95 sinais gráficos (letras do alfabeto latino, sinais de pontuação e sinais matemáticos) e 33 sinais de controle, utilizando portanto 
apenas 7 bits para representar todos os seus símbolos.
ASCII - letras, nº e outros simbolos legiveis, segundo um padrao que e universalmente aceito, arquivos deste tipos podem ser manipulados
diretamente por usuarios atraves de editor de texto por exemplo.
E seu conteudo corresponde ao padrao aberto e bem conhecidos de todos, portanto, o R tem padrao nativo para arquivos em formato ASCII, que
voce encontra em todos os sistemas informatizados disponiveis no mercado.

Formula de configurar a funcao read.table()
read.table("arquivo.txt", header = TRUE, sep = "," , StringAsFactors = FALSE)
read.table("arquivo.txt", header = TRUE, sep = "\t" , StringAsFactors = FALSE)

header = arquivo tem ou nao cabecalho.

Formula de configurar a funcao read.csv()
read.csv("arquivo.txt", StringAsFactors = FALSE)
read.csv2("arquivo.txt",  sep = ";" , dec = "," , StringAsFactors = FALSE)

Formula de configurar a funcao read.delim()
read.delim("arquivo.txt")
read.delim2("arquivo.txt")
Onde voce tem um delimitador especifico entre os campos pode ser um caracter (espaco), (tab), (PIP) e assim por adiante.

#Parametros:
Todas essas funcoes possuem parâmetros.

-> header - define se o arquivo com/sem cabecalho;
-> Col.names - vetor de caracter, onde voce pode definir um nome para as colunas no momento da importacao.
-> na.String - define se uma string será ou nao substituida por valores NA.
-> Col.Classes - permite definir o tipo de dados que sera gerado no R no momento da importacao.
-> sep - separador de colunas.
-> StringsAsFactors - permite converter ou nao uma coluna do tipo String para fator, classificando as variaveis categoricas.

#Pacote readr():

Este e um pacote novo, foi criado em meados de 2014, o pacote readr fornece funcoes para leitura de dados de texto, funcoes mais rapidas 
do que visto ate agora, motivo porque sao baseadas em linguagem C++.

O pacote readr() precisa ser instalado, pois nao e nativo do R, foi desenvolvido pelos desenvolvedores do R Studio.
As funcoes deste pacote sao as mesmas do utils() que vimos anteriormente, a diferenca e o anderlaine (_) ao inves do ponto (.).
Note que a diferenca e minima entre os pacote, pporem, reduz em mai de 30 segundos o tempo de carregamento de arquivos.

Formula de configurar a funcao read.table()
read_table("arquivo.txt", Col_names = c("day", "month", "year", "temp"))

Eh muito parecido com o utils() a diferenca sao os codigos interno.

#Manipular arquivos em Excel:

Pacote XLConnect > #requer o Java instalado#
loadWorkbook()
getSheets()
readWorksheet()
CreatSheet()
WriteWorkSheet()

#Pacote XLSX
read.xlsx(file, sheetIndex, header=TRUE, colClasses=NA)
read.xlsx2(file, sheetIndex, header=TRUE, colClasses='character')

Baseado em Java

#Pacote readxl
read_excel()
Excel_sheets()

Sua principal vantagem e que nao possue dependencia, alem de ser bem veloz.

Outro pacote para entegir com o Excel é o:

#Pacote gdata
read.xls()

Atencao aos detalhes:
-> Em seus arquivos, evite espacos em branco e nº com titulo para as colunas;
-> Normalmente, a primeira linha de cada arquivo e o cabecalho, a lista de nomes para cada coluna;
-> Para a concatenacao de palavras, utilizar ponto(.) ou hifen(_);
-> Use nomes curtos para linhas e colunas;
-> Evite o uso de caracteres especiais;
-> Dados, NA, podem existir no seu conjunto de dados e isso sera tratado no processo de limpeza.

Alem disso outras caracteristicas de arquivos sao importantes, tais como:
-> Encoding;
-> Linha de cabecalho;
-> Separador de coluna;
-> Quoting (aspas);
-> Missing value;
-> Linhas em branco;
-> Espacos em branco em campos do tipo caracter;
-> comentarios.
Todas essas itens necessitam de atencao durante a manipulacao de dados.

Existem tambem outros pacotes no R para manipilacao de dados
#Pacotes para importacao de arquivos:
-> rjon - leitura de arquivos json para o R;
-> xml - leitura de arquivos xml;
-> httr - leitura de arquivos html para o R;
-> Rcurl - web Crawling;
-> foreign - leitura de arquivos do SPSS, SAS;
-> SAS7bdat - SAS.

#Funcao data.table
Fornece um rapido processo de carga de dados, pois as funcoes reconhecem automaticamente os parametros dos arquivos e decidem a melhor forma de carga.
fread()

Resumindo:
Temos um grupo de funcoes para manipular arquivos texto do tipo txt, csv e um conjunto de pacotes e todas as suas funcoes para manipulacao de arquivos em Excel.

#Manipulacao de arquivos txt e csv:
-> Package utils - read.table(); read.csv(); read.delim()
-> Package readr - read_table(); read_csv(); read_delim()
-> Package data.table - fread()

#Manipulacao de arquivos em excel:
XLConnect;
XLSX;
readxl;
gdata;
r2excel.

#BAIXAR EDITOR SUBLIMETEXT2# muda a coloracao conforme muda o script.

#Funcao -> list.files() utilizado para saber o que tem dentro do diretorio
Quando tiver arquivos muito grande, pode guardar o arquivo como zip em um diretorio na internet, podera fazer o download do arquivo unzip, faz o seu trabalho 
com isso importa o dataframe para execucao.

#Funcao -> file.choose() serve para selecionar o arquivo, nao precisa escrever mais o nome:
meu_arquivo <- read_csv(file.choose())
Pode realizar o mesmo procedimento informando o caracter do arquivo que ira selecionar:
meu_arquivo <- read_csv(file.choose(), sep=";")
Com a funcao file.choose(), nao precisa mais passsar o nome do arquivo, pode apenas executar, abrira um 'pront'(lista de todos os arquivos), com isso selecionar
o arquivo diretamente, sem precisar especificar diretamente qual o nome do arquivo. MUITO INTERESSANTE.!

#head() - serve para observar os arquivos que foram importados.

#str() - ao importar, verifique como esta o arquivo, analise os tipos de dados e variaveis existente, se e integer ou character, se veio de uma coluna como fator ou nao.
Isso e super importante porque ira afetar seu processo de analise.

#read_lines("arquivo.txt", skip=0, n_max=-1L)
serve para ler linha a linha ate o final do arquivo.

#read_file("arquivo.txt")
utilizado para uma visualizacao rapida do arquivo e os caracteres com \n (significa final de linha).

#Alterar a classificacao da variavel, utilizar a funcao read_csv, exemplo:
df_iris <- read_csv("iris.csv", col_types = list(
                   Sepal.Length = col_double(),
                   Sepal.Width = col_double(),
                   Sepal.Length = col_double(),
                   Petal.Width = col_double(),
                   Species = col_factor (c("setosa", "versicolor"))
Pode realizar no momento da importacao do seu arquivo .csv, realizar as transformacaoes e com isso economizar tempo facilitando o trabalho.

As funcoes read_csv permite importar o arquivo diretamente.
df_cad <- read_csv("http://datascience...")
head(dd_cad)

tbl_df -> tambem utilizado no pacote 'dplyr'
tbl_df -> E um tipo de dataframe mas formatado dentro do R como tabela, ele tem caracteristicas proprias principalmente no tratamento de dados em memoria.

View() utilizada para visualizar a bd em formato de tabela.

backup
Quando trabalhamos com dados e importante ir salvando os arquivos do trabalho em csv.
write.csv(df.cad, "df_cad_bkp.csv")
df_cad nome do esta trabalhando como exemplo.

Salvar varios arquivos simultaneamente.
list.files()

Mostrar a lista de arquivos que estao no diretorio:
lista_arquivos <- list.files('caminho do arquivos')
class(lista_arquivos)
lista_arquivos - gera problema quando ha extensao diferente

lista_arquivos2 <- lapply(lista_arquivos, read_csv)
quando gerar a lista de ERROR ou WARNING, lista a funcao:
problems(lista_arquivos2)
Ira especificar alguns dos problemas, com isso ajuda na identificacao do problemas que tenha na importacao de 1(um) ou mais arquivos.

Outra funcao tambem util e:
#Parsing
parse_date("01/02/2015", "%m/%d/%y")
como ja vimos nossa string de data precisa estar formatada para que possamos converter em objeto tipo data.

Antes de salvar o arquivo que estiver importando podera utilizar o parse_date() dentro das suas funcoes de importacao ou exportacao.

Outro recurso interessante e o :
locale() dependendo do idioma com o qual estiver trabalhando seus arquivos, voce pode utilizar o locale() com isso especificar o idioma
exato e evitar possiveis erros de conversao.
locale("in")
locale("fr")
locale("pt")

Importar grandes arquivos de dados
#http://www.bigememory.org
installpackages("bigmemory")
library("bigmemory")


O R nao trabalha bem com arquivos grandes, mas existe alguns projetos visando preparar o R para tratar arquivos do tamanho do bigdata.
Um dos trabalhos do cientista de dados e conhecer as novidades, interagir com os novos pacotes e nao ficar preso ao que todo mundo faz.
PENSAMENTO DE HACKER
-> cran
-> rbloger
-> carga de dados
































































































































































































































































 






















































 



 








